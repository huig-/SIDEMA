import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.InformeDeTarea;
import icaro.infraestructura.recursosOrganizacion.recursoTrazas.ItfUsoRecursoTrazas;
import icaro.infraestructura.recursosOrganizacion.recursoTrazas.imp.componentes.InfoTraza;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.*;
import icaro.infraestructura.patronAgenteCognitivo.procesadorObjetivos.gestorTareas.ItfGestorTareas;
import icaro.aplicaciones.SIDEMA.informacion.*;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.Objetivo;
import icaro.aplicaciones.agentes.agenteNeutralizador.tareas.*;
import icaro.aplicaciones.agentes.agenteNeutralizador.objetivos.*;
import java.lang.String;
import icaro.aplicaciones.Rosace.informacion.*;
import icaro.aplicaciones.Rosace.tareasComunes.*;
import icaro.aplicaciones.Rosace.objetivosComunes.*;
import icaro.aplicaciones.agentes.agenteAplicacionSubordinadoCognitivo.tareas.*;

global ItfGestorTareas gestorTareas;
global ItfUsoRecursoTrazas recursoTrazas;
global String agentId;

//Primera regla que se ejecutara. Solo se debe disparar una vez.
rule "Acciones Iniciales Neutralizador"
	when
		not (exists(Focus()))
		not (exists(MisObjetivos()))
	then
		TareaSincrona tarea1 = gestorTareas.crearTareaSincrona(InicializarInfoWorkMem.class);
   		tarea1.ejecutar( );
   		
   		//TODO mirar que hace tarea 2
   		TareaSincrona tarea2 = gestorTareas.crearTareaSincrona(InicializarRobotSIDEMA.class);
   		tarea2.ejecutar();
   		
   		recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
   		System.out.println( "\n"+agentId +"EJECUTO LA REGLA Acciones Iniciales\n\n" ); 
end

rule "Conocer Centro Control"
	when
		focoActual : Focus(foco == null)
		ordenCC : OrdenComenzarSimulacion(id2 : identEmisor, just:justificacion)
		robot: Neutralizador(id == agentId)
	then
	robot.setMapa((Mapa)just);
   	robot.setCC(id2);
   	retract(ordenCC);
	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
		System.out.println("\n"+agentId +" EJECUTO LA REGLA CONOCER CENTRO CONTROL\n\n");
end

rule "Devolver Ubicacion Actual"
	when
		focoActual : Focus(foco == null)
		ordenCC: OrdenSolicitarPosicion( mensajeOrden == VocabularioSIDEMA.MsgPeticionPosicionActual, mapa:justificacion)
		robot : Robot(id == agentId)
	then
		TareaSincrona tarea = gestorTareas.crearTareaSincrona(icaro.aplicaciones.agentes.agenteNeutralizador.tareas.InformarPosicion.class);
		tarea.ejecutar(robot,mapa);
		recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
		System.out.println("\n"+agentId +"EJECUTO LA REGLA Devolver Ubicacion Actual\n\n");
end


rule "Desactivar Mina"
	when
		focoActual : Focus(foco == null)
		ordenCC: OrdenDesactivar( mensajeOrden == VocabularioSIDEMA.MsgPeticionDesactivar, celdaMina:justificacion)
		robot : Robot(id == agentId)
	then
		TareaSincrona tarea = gestorTareas.crearTareaSincrona(icaro.aplicaciones.agentes.agenteNeutralizador.tareas.DesactivarMina.class);
		tarea.ejecutar(celdaMina,robot);
		recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
		System.out.println("\n"+agentId +"EJECUTO LA REGLA Desactivar Mina\n\n");
end