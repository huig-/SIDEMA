import icaro.infraestructura.recursosOrganizacion.recursoTrazas.ItfUsoRecursoTrazas;
import icaro.infraestructura.recursosOrganizacion.recursoTrazas.imp.componentes.InfoTraza;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.*;
import icaro.infraestructura.patronAgenteCognitivo.procesadorObjetivos.gestorTareas.ItfGestorTareas;
import icaro.infraestructura.entidadesBasicas.comunicacion.*
import icaro.aplicaciones.agentes.AgenteAplicacionAccesoADO.objetivos.*;
import icaro.aplicaciones.agentes.AgenteAplicacionAccesoADO.tareas.*;
import icaro.aplicaciones.informacion.dominioClases.aplicacionAcceso.InfoAccesoSinValidar;
import icaro.aplicaciones.informacion.dominioClases.aplicacionAcceso.VocabularioSistemaAcceso;
import icaro.aplicaciones.agentes.AgenteAplicacionAccesoADO.comportamientoAlta.tareas.*;
import icaro.aplicaciones.agentes.AgenteAplicacionAccesoADO.comportamientoAlta.objetivos.*;

global ItfGestorTareas gestorTareas;
global ItfUsoRecursoTrazas recursoTrazas;
global String agentId;
global ItfGestorTareas gestorTareas;
global ItfUsoRecursoTrazas recursoTrazas;
global String agentId;

rule "Creacion de los objectivos iniciales"
when 
then 
TareaSincrona tarea = gestorTareas.crearTareaSincrona(InicializarInfoWorkMem.class);
    tarea.ejecutar();
recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
end
// =======================================================================
//Reglas de focalizacion.
rule "Regla de focalizacion en objetivo AutorizarAccesoUsuarios"
 when
    f:Focus(foco == null )
    obj:AutorizarAccesoUsuarios(state==Objetivo.PENDING)
 then
    f.setFoco(obj);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
    update(f);
end

rule "Regla de re-focalizacion en objetivo AutorizarAccesoUsuarios cuando dar Alta se consigue"
 when
    obj1:DarAlta(state==Objetivo.SOLVED)
    f:Focus(foco ==obj1)
    obj2:AutorizarAccesoUsuarios(state==Objetivo.SOLVING)
 then
    f.setFoco(obj2);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
    update(f);
end
//=======================================================================
///Reglas de Consecucion del Objetivo AutorizarAccesoUsuarios
rule "Inicio del proceso de consecucion del  objetivo AutorizarAccesoUsuarios"
  when
    obj:AutorizarAccesoUsuarios(state==Objetivo.PENDING)
    Focus(foco ==obj)
  then
    obj.setSolving();
    update(obj);
end
rule "Solicitud de Datos Inicial"
   when
    obj:AutorizarAccesoUsuarios(state==Objetivo.SOLVING)
    Focus(foco == obj)
   then
    recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Se ejecuta la tarea : SolicitarDatosAcceso",InfoTraza.NivelTraza.debug));
     Tarea tarea = gestorTareas.crearTarea(SolicitarDatosAcceso.class);
     tarea.ejecutar(VocabularioSistemaAcceso.IdentRecursoVisualizacionAccesoAlta);
    recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Realizando el objetivo : "+obj.getgoalId()+"  Ejecutando la tarea : "+ tarea.getIdentTarea() ,InfoTraza.NivelTraza.debug));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end

rule "Validacion de datos Iniciales de Acceso"
  when
    obj:AutorizarAccesoUsuarios(state == Objetivo.SOLVING)
    Focus(foco==obj)
    infoContEvt:InfoContEvtMsgAgteReactivo(msg soundslike "autenticacion" )
 //   perf:PerformativaUsuario ( nombrePerformativa=="informacion", nombreOperacion soundslike "autenticacion")
 //   evtContent:ExtractedInfo(origen==VocabularioSistemaAcceso.IdentRecursoVisualizacionAccesoInicial,contenido == perf)
    
then
    recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Se ejecuta la tarea : ValidarDatosAutenticacionUsuarioAlta",InfoTraza.NivelTraza.debug));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
    Tarea tarea = gestorTareas.crearTarea(ValidarDatosAutenticacionUsuarioAlta.class);
    tarea.ejecutar(infoContEvt);
    retract(infoContEvt);
end

rule "Permiso del Acceso con Informe Tarea"
 when
  obj:AutorizarAccesoUsuarios(state == Objetivo.SOLVING)
  Focus(foco== obj)
  informeTarea:InformeDeTarea(identTarea == "ValidarDatosAutenticacionUsuarioAlta", contenidoInforme == "usuarioValido")
 then
  Tarea tarea = gestorTareas.crearTarea(PermitirAcceso.class);
  tarea.ejecutar(VocabularioSistemaAcceso.IdentRecursoVisualizacionAccesoAlta);
  retract(informeTarea);
end

rule "Denegacion del Acceso con Informe Tarea"
 when
  obj:AutorizarAccesoUsuarios(state == Objetivo.SOLVING)
  Focus(foco==obj)
  informeTarea:InformeDeTarea(identTarea == "ValidarDatosAutenticacionUsuarioAlta", contenidoInforme == "usuarioNoValido")
 then
    Tarea tarea = gestorTareas.crearTarea(DenegarAcceso.class);
    recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Resolviendo el objetivo : "+obj.getgoalId()+"  Ejecutando la tarea : "+ tarea.getIdentTarea() ,InfoTraza.NivelTraza.debug));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
    tarea.ejecutar(VocabularioSistemaAcceso.IdentRecursoVisualizacionAccesoAlta);
    retract(informeTarea);
end

rule " objetivo AutorizarAccesoUsuarios Conseguido"
  when
    obj:AutorizarAccesoUsuarios(state==Objetivo.SOLVING)
    Focus(foco ==obj)
    informeTarea:InformeDeTarea(identTarea == "PermitirAcceso", contenidoInforme == "Autorizacion_Acceso_Notificado_Al_Usuario")
  then
    obj.setSolved();
    recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Se ha resuelto el objetivo : "+obj.getgoalId(),InfoTraza.NivelTraza.debug));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());    
    update(obj);
end

rule "Peticion de Terminacion  del Acceso"
  when
    obj:AutorizarAccesoUsuarios(state == Objetivo.SOLVING)
    Focus(foco==obj)
    infoContEvt:InfoContEvtMsgAgteReactivo(msg soundslike "terminacion" )
  then
    Tarea tarea = gestorTareas.crearTarea(PeticionTerminacionAcceso.class);
    tarea.ejecutar();
    retract(infoContEvt);
//    retract(perf);
end
//  ===============================================
// Reglas del ciclo de vida del objetivo DarAlta

rule "Creacion del objetivo DarAlta"
 when
  obj:AutorizarAccesoUsuarios(state == Objetivo.SOLVING)
  Focus(foco==obj)
  informeTarea:InformeDeTarea(identTarea == "ValidarDatosAutenticacionUsuarioAlta", contenidoInforme == "usuarioNoValido")
   not (exists (DarAlta()))
 then
  DarAlta nuevoObj = new DarAlta();
  insert(nuevoObj); retract(informeTarea);
  recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
  recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Se genera el objetivo  "+nuevoObj.getgoalId(),InfoTraza.NivelTraza.debug));
 end 
//  ===============================================
// Reglas de consecucion del objetivo DarAlta

rule "Focalizacion en el  objetivo DarAlta"
  when
    obj1:AutorizarAccesoUsuarios(state == Objetivo.SOLVING)
    f:Focus(foco==obj1)
    obj2:DarAlta(state==Objetivo.PENDING)
  then
    f.setFoco(obj2);
    update(f);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end
rule "Inicio de consecucion del objetivo DarAlta"
  when
    obj:DarAlta(state==Objetivo.PENDING)
    Focus(foco==obj)  
  then
    obj.setSolving();
    update(obj);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end

rule "Orden al visualizador para  Solicitar los datos de Alta del usuario"
  when
    obj:DarAlta(state==Objetivo.SOLVING)
    Focus(foco ==obj)
  then
    Tarea tarea = gestorTareas.crearTarea(SolicitarDatosParaDardeAlta.class);
    tarea.ejecutar(VocabularioSistemaAcceso.IdentRecursoVisualizacionAccesoAlta);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end
rule " Validar y guardar datos iniciales de alta  "
  when
    obj:DarAlta(state == Objetivo.SOLVING)
    Focus(foco==obj)
    infoContEvt:InfoContEvtMsgAgteReactivo(msg soundslike "peticion_alta" )
  then
// La tarea valida los datos de acceso introducidos por el usuario
//  si ya estan definidos le pide otros datos
    Tarea tarea = gestorTareas.crearTarea(ValidarDatosAlta.class);
    tarea.ejecutar(infoContEvt);
    retract(infoContEvt);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end
rule " Validar y guardar nuevos  datos de alta  "
  when
    obj:DarAlta(state == Objetivo.SOLVING)
    Focus(foco==obj)
    infoContEvt:InfoContEvtMsgAgteReactivo(msg soundslike "peticion_alta" )
    informeTarea:InformeDeTarea(identTarea == "GuardarInfoAcceso", contenidoInforme == "infoUsuarioYaExistente")
  then
// La tarea valida los datos de acceso introducidos por el usuario
//  si ya estan definidos le pide otros datos
    Tarea tarea = gestorTareas.crearTarea(ValidarDatosAlta.class);
    tarea.ejecutar(infoContEvt);
    retract(infoContEvt);retract(informeTarea);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end

rule "Objetivo DarAlta conseguido"
 when
  AutorizarAccesoUsuarios(state == Objetivo.SOLVING)
  obj:DarAlta(state == Objetivo.SOLVING)
  Focus( foco==obj )
//  InformeDeTarea(identTarea == "ValidarDatosAlta ", contenidoInforme == "InfoAltaUsuarioGuardada")
informeTarea:InformeDeTarea(identTarea == "ValidarDatosAlta",contenidoInforme == "InfoAltaUsuarioGuardada")
 then
  obj.setSolved();
  update(obj);
  recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end
