import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.InformeDeTarea;
import icaro.infraestructura.recursosOrganizacion.recursoTrazas.ItfUsoRecursoTrazas;
import icaro.infraestructura.recursosOrganizacion.recursoTrazas.imp.componentes.InfoTraza;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.*;
import icaro.infraestructura.patronAgenteCognitivo.procesadorObjetivos.gestorTareas.ItfGestorTareas;
import icaro.aplicaciones.SIDEMA.informacion.*;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.Objetivo;
import icaro.aplicaciones.agentes.agenteCC.tareas.*;
import icaro.aplicaciones.agentes.agenteCC.objetivos.*;
import icaro.aplicaciones.Rosace.informacion.*;
import icaro.aplicaciones.Rosace.tareasComunes.*;
import icaro.aplicaciones.Rosace.objetivosComunes.*;
import icaro.aplicaciones.agentes.agenteAplicacionSubordinadoCognitivo.tareas.*;
import java.lang.String;

global ItfGestorTareas gestorTareas;
global ItfUsoRecursoTrazas recursoTrazas;
global String agentId;

//Primera regla que se ejecutara. Solo se debe disparar una vez.
rule "Acciones Iniciales Centro de Control"
	when
		not (exists(Focus()))
		not (exists(MisObjetivos()))
		mapa : Mapa()
	then
		TareaSincrona tarea1 = gestorTareas.crearTareaSincrona(InicializarInfoWorkMem.class);
   		tarea1.ejecutar( );
   		//TODO mirar que hace tarea 2
   		TareaSincrona tarea2 = gestorTareas.crearTareaSincrona(InicializarRobotSIDEMA.class);
   		tarea2.ejecutar( );
   		recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
   		System.out.println( "\n"+agentId +" EJECUTO LA REGLA Acciones Iniciales\n\n" ); 
end

rule "Distribuir Terreno"
	when
		focoActual : Focus(foco == null)
		mapa: Mapa()
		ordenCC : OrdenComenzarSimulacion()
	then
		TareaSincrona tarea = gestorTareas.crearTareaSincrona(icaro.aplicaciones.agentes.agenteCC.tareas.DistribuirTerreno.class);
		tarea.ejecutar(mapa,ordenCC);
		recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
		System.out.println("\n"+agentId +" EJECUTO LA REGLA Distribuir Terreno\n\n");
end

rule "Solicitar Ubicacion Actual"
	when
		focoActual : Focus(foco == null)
		ordenCC: InformarMinaEncontrada( mensajeOrden == VocabularioSIDEMA.MsgPeticionMinaEncontrada, minaCelda : justificacion)
		robot: CentroControl(id == agentId)
	then
		TareaSincrona tarea = gestorTareas.crearTareaSincrona(icaro.aplicaciones.agentes.agenteCC.tareas.SolicitarInformacionNeutralizador.class);
		tarea.ejecutar(robot,minaCelda);
		recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
		System.out.println("\n"+agentId +" EJECUTO LA REGLA Solicitar Ubicacion Actual\n\n");
end

rule "Recibir Ubicacion Actual"
	when
		focoActual : Focus(foco == null)
		ordenCC: InformarPosicionActual( mensajeOrden == VocabularioSIDEMA.MsgInformarPosicionActual, emisor : identEmisor, celdaActual : justificacion)
		robot: CentroControl(id == agentId)
	then
		robot.actualizarMsg((Celda)celdaActual,emisor);
		recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
		System.out.println("\n"+agentId +" EJECUTO LA REGLA Recibir Ubicacion Actual\n\n");
		if(robot.recibidosNeutralizadores()){
			TareaSincrona tarea = gestorTareas.crearTareaSincrona(icaro.aplicaciones.agentes.agenteCC.tareas.EnviarNeutralizador.class);
			tarea.ejecutar(robot);
			recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
			System.out.println("\n"+agentId +" EJECUTO LA REGLA Recibir Ubicaci√≥n Actual\n\n");
		}
end

rule "Encontrado Neutralizador Libre"
	when
		focoActual : Focus(foco == null)
		ordenCC: InformarNeutralizadorLibre( mensajeOrden == VocabularioSIDEMA.MsgInformarNeutralizadorLibre, emisor : identEmisor)
		robot: CentroControl(id == agentId)
	then
		if(!robot.getNeutralizadores().contains(emisor))
			robot.getNeutralizadores().add(emisor);
		recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
		System.out.println("\n"+agentId +" EJECUTO LA REGLA Encontrado Neutralizador Libre \n\n");
		if(robot.recibidosNeutralizadores()){
			TareaSincrona tarea = gestorTareas.crearTareaSincrona(icaro.aplicaciones.agentes.agenteCC.tareas.EnviarNeutralizador.class);
			tarea.ejecutar(robot);
			recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
			System.out.println("\n"+agentId +" EJECUTO LA REGLA Encontrado Neutralizador Libre\n\n");
		}
end


rule "Enviar Neutralizador"
	when
		focoActual : Focus(foco == null)
		robot : CentroControl(id == agentId)
		eval(robot.recibidosNeutralizadores())
	then
		TareaSincrona tarea = gestorTareas.crearTareaSincrona(icaro.aplicaciones.agentes.agenteCC.tareas.EnviarNeutralizador.class);
		tarea.ejecutar(robot);
		recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
		System.out.println("\n"+agentId +" EJECUTO LA REGLA Enviar Neutralizador\n\n");
end