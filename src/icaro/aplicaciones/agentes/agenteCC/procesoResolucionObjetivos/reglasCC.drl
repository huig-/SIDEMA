import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.InformeDeTarea;
import icaro.infraestructura.recursosOrganizacion.recursoTrazas.ItfUsoRecursoTrazas;
import icaro.infraestructura.recursosOrganizacion.recursoTrazas.imp.componentes.InfoTraza;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.*;
import icaro.infraestructura.patronAgenteCognitivo.procesadorObjetivos.gestorTareas.ItfGestorTareas;
import icaro.aplicaciones.SIDEMA.informacion.*;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.Objetivo;
import icaro.aplicaciones.agentes.agenteCC.tareas.*;
import icaro.aplicaciones.agentes.agenteCC.objetivos.*;
import icaro.aplicaciones.Rosace.informacion.*;
import icaro.aplicaciones.Rosace.tareasComunes.*;
import icaro.aplicaciones.Rosace.objetivosComunes.*;
import icaro.aplicaciones.agentes.agenteAplicacionSubordinadoCognitivo.tareas.*;
import java.lang.String;
import java.util.ArrayList;
import java.util.List;

global ItfGestorTareas gestorTareas;
global ItfUsoRecursoTrazas recursoTrazas;
global String agentId;

//Primera regla que se ejecutara. Solo se debe disparar una vez.
rule "Acciones Iniciales Centro de Control"
	when
		not (exists(Focus()))
		not (exists(MisObjetivos()))
	then
		TareaSincrona tarea1 = gestorTareas.crearTareaSincrona(InicializarInfoWorkMem.class);
   		tarea1.ejecutar();
   		//TODO mirar que hace tarea 2
   		TareaSincrona tarea2 = gestorTareas.crearTareaSincrona(InicializarRobotSIDEMA.class);
   		tarea2.ejecutar();
   		recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
   		System.out.println( "\n"+agentId +" EJECUTO LA REGLA Acciones Iniciales\n\n" ); 
end

rule "Comenzar Simulacion"
	when
		focoActual : Focus(foco == null)
		ordenCC : OrdenComenzarSimulacion()
		robot: CentroControl(id == agentId)
	then
		retract(ordenCC);
   		TareaSincrona tarea = gestorTareas.crearTareaSincrona(icaro.aplicaciones.agentes.agenteCC.tareas.IntroducirMapa.class);
 		tarea.ejecutar(ordenCC,robot);
		recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
		System.out.println("\n"+agentId +" EJECUTO LA REGLA COMENZAR SIMULACION\n\n");
end

rule "Solicitar Estimacion"
	when
		focoActual : Focus(foco == null)
		robot: CentroControl(id == agentId)
		eval(robot.getExploradoresLibres().size() > 0 && robot.getMapa().inexploradas() > 0)
	then
		List<String> exploradoresAAsignar = new ArrayList<String>();
		for (String e : robot.getExploradoresLibres()) {
			robot.getExploradoresAsignados().add(e);
			exploradoresAAsignar.add(e);
		}
		robot.setExploradoresLibres(new ArrayList<String>());
		TareaSincrona tarea = gestorTareas.crearTareaSincrona(icaro.aplicaciones.agentes.agenteCC.tareas.DistribuirTerreno.class);
		tarea.ejecutar(robot, exploradoresAAsignar);
		recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
		System.out.println("\n"+agentId +" EJECUTO LA REGLA Distribuir Terreno\n\n");
end

rule "Solicitar Ubicacion Actual"
	when
		focoActual : Focus(foco == null)
		ordenCC: InformarMinaEncontrada( mensajeOrden == VocabularioSIDEMA.MsgPeticionMinaEncontrada, minaCelda : justificacion)
		robot: CentroControl(id == agentId)
		eval(robot.getNeutralizadores().size() > 0)
	then
		retract(ordenCC);
		TareaSincrona tarea = gestorTareas.crearTareaSincrona(icaro.aplicaciones.agentes.agenteCC.tareas.SolicitarInformacionNeutralizador.class);
		tarea.ejecutar(robot,minaCelda);
		recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
		System.out.println("\n"+agentId +" EJECUTO LA REGLA Solicitar Ubicacion Actual\n\n");
end

rule "Recibir Mejor Estimacion"
	when
		focoActual : Focus(foco == null)
		ordenCC: InformarCandidatosAExplorar( emisor : identEmisor, candidatos : justificacion)
		robot: CentroControl(id == agentId)
	then
		retract(ordenCC);
		TareaSincrona tarea = gestorTareas.crearTareaSincrona(icaro.aplicaciones.agentes.agenteCC.tareas.ActualizarMensajes.class);
		tarea.ejecutar(robot,candidatos, emisor);
		recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
		System.out.println("\n"+agentId +" EJECUTO LA REGLA Recibir Mejor Estimacion\n\n");
		
end

rule "Enviar Explorador"
	when
		focoActual : Focus(foco == null)
		robot : CentroControl(id == agentId)
		mapa : Mapa()
		eval(robot.recibidosExploradores())
	then
		robot.setExploradoresAsignados(new ArrayList<String>());
		TareaSincrona tarea = gestorTareas.crearTareaSincrona(icaro.aplicaciones.agentes.agenteCC.tareas.AsignarCasillasAExplorar.class);
		tarea.ejecutar(robot,mapa);
		recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
		System.out.println("\n"+agentId +" EJECUTO LA REGLA Enviar Explorador\n\n");
end

rule "Recibir Ubicacion Actual"
	when
		focoActual : Focus(foco == null)
		ordenCC: InformarPosicionActual( mensajeOrden == VocabularioSIDEMA.MsgInformarPosicionActual, emisor : identEmisor, celdaActual : justificacion)
		robot: CentroControl(id == agentId)
	then
		retract(ordenCC);
		TareaSincrona tarea = gestorTareas.crearTareaSincrona(icaro.aplicaciones.agentes.agenteCC.tareas.ActualizarMensajes.class);
		tarea.ejecutar(robot,celdaActual,emisor);
		recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
		System.out.println("\n"+agentId +" EJECUTO LA REGLA Recibir Ubicacion Actual\n\n");
		
end

rule "Encontrado Neutralizador Libre"
	when
		focoActual : Focus(foco == null)
		ordenCC: InformarNeutralizadorLibre( mensajeOrden == VocabularioSIDEMA.MsgInformarNeutralizadorLibre, just : justificacion)
		robot: CentroControl(id == agentId)
	then
		retract(ordenCC);
		TareaSincrona tarea = gestorTareas.crearTareaSincrona(icaro.aplicaciones.agentes.agenteCC.tareas.GuardarRobotLibre.class);
		tarea.ejecutar("neutralizador",robot,just);
		recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
		System.out.println("\n"+agentId +" EJECUTO LA REGLA Encontrado Neutralizador Libre \n\n");
		//if(robot.recibidosNeutralizadores() && robot.getMinasPendientes().size()>0){
		//	TareaSincrona tarea = gestorTareas.crearTareaSincrona(icaro.aplicaciones.agentes.agenteCC.tareas.EnviarNeutralizador.class);
		//	tarea.ejecutar(robot);
		//	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
		//	System.out.println("\n"+agentId +" EJECUTO LA REGLA Encontrado Neutralizador Libre\n\n");
		//}
end

rule "Encontrado Explorador Libre"
	when
		focoActual : Focus(foco == null)
		ordenCC: InformarExploradorLibre( mensajeOrden == VocabularioSIDEMA.MsgInformarExploradorLibre, just : justificacion)
		robot: CentroControl(id == agentId)
	then
		retract(ordenCC);
		TareaSincrona tarea = gestorTareas.crearTareaSincrona(icaro.aplicaciones.agentes.agenteCC.tareas.GuardarRobotLibre.class);
		tarea.ejecutar("explorador",robot,just);
		recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
		System.out.println("\n"+agentId +" EJECUTO LA REGLA Encontrado Neutralizador Libre \n\n");
		//if(robot.recibidosNeutralizadores() && robot.getMinasPendientes().size()>0){
		//	TareaSincrona tarea = gestorTareas.crearTareaSincrona(icaro.aplicaciones.agentes.agenteCC.tareas.EnviarNeutralizador.class);
		//	tarea.ejecutar(robot);
		//	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
		//	System.out.println("\n"+agentId +" EJECUTO LA REGLA Encontrado Neutralizador Libre\n\n");
		//}
end


rule "Enviar Neutralizador"
	when
		focoActual : Focus(foco == null)
		robot : CentroControl(id == agentId)
		mapa : Mapa()
		eval(robot.recibidosNeutralizadores())
		eval(robot.getMinasPendientes().size() > 0)
		eval(robot.getMapa().existeCamino(robot.getMinasPendientes().get(0),robot.getCurrentPos()))
	then
		TareaSincrona tarea = gestorTareas.crearTareaSincrona(icaro.aplicaciones.agentes.agenteCC.tareas.EnviarNeutralizador.class);
		tarea.ejecutar(robot, robot.getMinasPendientes().remove(0));
		recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
		System.out.println("\n"+agentId +" EJECUTO LA REGLA Enviar Neutralizador\n\n");
end