/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package icaro.aplicaciones.recursos.recursoVisualizadorEntornosSimulacion.imp;

import icaro.aplicaciones.Rosace.informacion.Coordinate;
import icaro.aplicaciones.Rosace.informacion.VocabularioRosace;
import icaro.aplicaciones.recursos.recursoPersistenciaEntornosSimulacion.imp.ReadXMLTestRobots;
import icaro.aplicaciones.recursos.recursoPersistenciaEntornosSimulacion.imp.ReadXMLTestSequence;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.util.Map;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import org.netbeans.api.visual.action.ActionFactory;
import org.netbeans.api.visual.action.WidgetAction;
import org.netbeans.api.visual.animator.SceneAnimator;
import org.netbeans.api.visual.graph.GraphScene;
import org.netbeans.api.visual.model.ObjectScene;
import org.netbeans.api.visual.model.ObjectSceneEventType;
import org.netbeans.api.visual.widget.LayerWidget;
import org.netbeans.api.visual.widget.Scene;
import org.netbeans.api.visual.widget.Widget;
import org.netbeans.api.visual.widget.general.IconNodeWidget;
import org.openide.util.Exceptions;
import org.openide.util.Utilities;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

/**
 *
 * @author FGarijo
 */
public class VisorCreacionEscenarios extends javax.swing.JFrame {

    /**
     * Creates new form NewJFramePrueba
     */
    private String tituloVentanaVisor = "ROSACE Scenario Visor";
    private String rutassrc = "src/";   //poner "src/main/java" si el proyecto de icaro se monta en un proyecto maven
    private String rutapaqueteConstructorEscenariosROSACE = "utilsDiseniaEscenariosRosace/";
    private String directorioTrabajo;
    private int excesoY = 20;
    private int excesoX = 10;
    private int dimensionVerticalTextArea = 20;
    private int dimensionHorizontalJFrame = excesoX + 1100;                                //width  -- ancho  1110 es el valor del ancho del JPanel del editor de escenarios
    private int dimensionVerticalJFrame = excesoY + dimensionVerticalTextArea + 700;     //height -- alto   700  es el valor del alto  del JPanel del editor de escenarios
    private int posicionXInicialJFrame = 0;
    private int posicionYInicialJFrame = 0;
    private JPanel contentPaneRoot;
    private Map<String, JLabel> robotslabel;      //La clave es el indice del robot, es decir, 1, 2, 3, .... El contenido es el JLabel
    private Map<String, JLabel> victimaslabel;    //La clave es el indice de la victima, es decir, 1, 2, 3, .... El contenido es el JLabel 
    private String imageniconoHombre = "Hombre.png";
    private String imageniconoMujer = "Mujer.png";
    private String imageniconoMujerRescatada = "MujerRescatada.png";
    private String imageniconoHombreRescatado = "HombreRescatado.png";
    private String imageniconoRobot = "Robot.png";
    private static  Image IMAGErobot,IMAGEmujer,IMAGEmujerRes ;
    private JTextArea textAreaMensaje;
    private JPanel panelVisor;
    private ObjectScene scene;
    private LayerWidget layer;
    private WidgetAction moveAction = ActionFactory.createMoveAction ();
    private Point punto = new Point(1,1);
    private SceneAnimator animator ;
//    public VisorEscenariosRosace3() {
//        initComponents();
//    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jMenuBar1 = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(VisorCreacionEscenarios.class, "VisorCreacionEscenarios.title")); // NOI18N
        setName("ventanaVisorEscenario"); // NOI18N

        jLabel1.setText(org.openide.util.NbBundle.getMessage(VisorCreacionEscenarios.class, "VisorCreacionEscenarios.jLabel1.text")); // NOI18N

        jTextField1.setText(org.openide.util.NbBundle.getMessage(VisorCreacionEscenarios.class, "VisorCreacionEscenarios.jTextField1.text")); // NOI18N

        jLabel2.setText(org.openide.util.NbBundle.getMessage(VisorCreacionEscenarios.class, "VisorCreacionEscenarios.jLabel2.text")); // NOI18N

        jTextField2.setText(org.openide.util.NbBundle.getMessage(VisorCreacionEscenarios.class, "VisorCreacionEscenarios.jTextField2.text")); // NOI18N
        setJMenuBar(jMenuBar1);
        jMenuBar1.getAccessibleContext().setAccessibleParent(this);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(221, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE))
        );

        jScrollPane1.getAccessibleContext().setAccessibleParent(jScrollPane1);

        getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(VisorCreacionEscenarios.class, "VisorCreacionEscenarios.AccessibleContext.accessibleName")); // NOI18N
        getAccessibleContext().setAccessibleParent(this);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(VisorEscenariosRosace3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(VisorEscenariosRosace3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(VisorEscenariosRosace3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(VisorEscenariosRosace3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                VisorCreacionEscenarios visor = new VisorCreacionEscenarios();
                visor.setVisible(true);
//                RobotSceneListenerTest visor2 = new RobotSceneListenerTest();
//                SceneSupport.show(visor2.getScene());
//                    for (int i = 0; i <= 400; i++) {
//                    visor.moverRobot("Robot3", 800+i, 600);
//                    visor.cambiarPosicionRobot("Robot4", 300+i, 600);
//                    visor.addNotify();
//                    visor.moverRobot("Robot2", 900, 700+i);
//                    visor.moverRobot("Robot1", 300+i, 700+i);
                    
//                    visor.cambiarPosicionRobot("robotIgualitario2", 800, 600);
//
//                    visor.cambiarPosicionRobot("robotIgualitario3", 1070, 650);
                    //visor.cambiarPosicionRobot("robotIgualitario3", 500, 700);  //en este caso pinta fuera del panel y no se ve el robot
//                    }
//                visor.cambiarPosicionRobot("Robot4", 800, 600);
//                visor.cambiarPosicionRobot("robot3", 1070, 650);
//                visor.cambiarPosicionRobot("robot1", 507, 650);
//                visor.cambiarPosicionRobot("robot2", 1080, 650);
//                visor.cambiarPosicionRobot("robot2", 10, 65);
//                visor2.addNode ("Robot1");
//                visor2.addNode ("Robot2");
//                visor2.addNode ("Robot3");
//                visor2.addNode ("Robot4");
//                visor.moverRobot("Robot2", 900, 700);
//                
//                visor2.moveTo("Robot2", new Point( 950,700));
//                visor2.moveTo("Robot1", new Point( 250,800));
//                visor2.moveTo("Robot4", new Point( 950,500));
//                visor.getScene().getSceneAnimator().animatePreferredLocation(scene.findWidget("Robot3"), new Point (500,800));
                
                    visor.cambiarIconoVictimaARescatada("victima3");
                } catch (Exception ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        });
    }
    public VisorCreacionEscenarios(String rutaFicheroRobotsTest) throws Exception {
        
    }
    public VisorCreacionEscenarios() throws Exception {
//        super("visor Escenario ");
        initComponents();
        initEscena();
        
//        scene = new RobotAnimatorTest();
//        jScrollPane1.setName("visor Escenario ");
        jScrollPane1.setViewportView(scene.createView());
        leerInfoEscenario();
          
        //*********************************************************************************************
        //Aniadir al panel panelVisor los componentes label que representan los robots leidos del xml
        //*********************************************************************************************
       
//        SceneSupport.show(scene);
    }
    private void initEscena(){
        String rutaIconoRobot =   rutapaqueteConstructorEscenariosROSACE + imageniconoRobot;
        IMAGErobot = Utilities.loadImage (rutaIconoRobot);
        IMAGEmujerRes = Utilities.loadImage ( rutapaqueteConstructorEscenariosROSACE +imageniconoMujerRescatada); 
        IMAGEmujer = Utilities.loadImage ( rutapaqueteConstructorEscenariosROSACE +imageniconoMujer);
        scene = new ObjectScene();
        this.layer = new LayerWidget (scene);
        scene.addChild (layer);
        scene.getActions ().addAction (ActionFactory.createZoomAction ());
        scene.getActions ().addAction (ActionFactory.createPanAction ());
        scene.getActions ().addAction (ActionFactory.createMoveAction ());
//        scene.addObjectSceneListener( ObjectSceneEventType.OBJECT_STATE_CHANGED);
//        animator = new SceneAnimator(scene);
//        animator.animateZoomFactor(0.8);
//        scene.getActions ().addAction (new RobotAnimatorTest.MyAction ());
    }
    public synchronized ObjectScene getScene(){
        return scene;
    }
    public synchronized void moverRobot(String idRobot, int nueva_coordx, int nueva_coordy){
    if(nueva_coordx<0)nueva_coordx=0;
    if(nueva_coordy<0)nueva_coordy=0;
//    SceneSupport.show(scene);
     Point  puntoRobot = new Point(nueva_coordx,nueva_coordy);
//        scene.getSceneAnimator().animatePreferredLocation(scene.findWidget (idRobot), puntoRobot);
//            getSceneAnimator ().animatePreferredLocation (findWidget (node), point != null ? point : new Point (++ index * 100, index * 100));
//            findWidget (node).setPreferredLocation (point != null ? point : new Point (++ index * 100, index * 100));
    
//     Widget wgRobot = scene.findWidget (idRobot);
//     if (puntoRobot == null) puntoRobot = new Point (++ index * 100, index * 100); 
//             scene.getSceneAnimator ().animateZoomFactor(0.5);     
//             scene.getSceneAnimator ().animatePreferredLocation (wgRobot,puntoRobot);
             scene.findWidget (idRobot).setPreferredLocation(puntoRobot);
           
             scene.getView().addNotify();

        try {
            this.wait(100);
        } catch (InterruptedException ex) {
            Exceptions.printStackTrace(ex);
        }
             this.notify();
//             scene.validate();
    }        
   public synchronized void cambiarPosicionRobot(String idRobot, int nueva_coordx, int nueva_coordy) {
       Point  puntoRobot = new Point(nueva_coordx,nueva_coordy);
//        scene.findWidget (idRobot).setPreferredLocation(puntoRobot);
//       scene.getSceneAnimator ().animateZoomFactor(0.5);
       Widget widg = scene.findWidget (idRobot);
       scene.getView().addNotify();
      
       if (animator.isAnimatingPreferredLocation(widg))try {
           wait(100);
       } catch (InterruptedException ex) {
           Exceptions.printStackTrace(ex);
       }else
       animator.animatePreferredLocation(widg, puntoRobot);
       

//       scene.getSceneAnimator().animatePreferredLocation(scene.findWidget (idRobot), puntoRobot);
//         SceneSupport.show (scene);

//        System.out.println("Localizacion del robot " + jlabelRobot.getText() + "-> " + jlabelRobot.getBounds());
        System.out.println("Localizacion del robot " + idRobot + "-> " + puntoRobot);
               this.notify();
            
 }
    private void leerInfoEscenario(){
        String rutaIconoRobot =   rutapaqueteConstructorEscenariosROSACE + imageniconoRobot;
         IMAGErobot = Utilities.loadImage (rutaIconoRobot);
        IMAGEmujer = Utilities.loadImage ( rutapaqueteConstructorEscenariosROSACE +imageniconoMujer); 
        IMAGEmujerRes = Utilities.loadImage ( rutapaqueteConstructorEscenariosROSACE +imageniconoMujerRescatada); 
        ReadXMLTestSequence rXMLTSeq = new ReadXMLTestSequence(VocabularioRosace.rutaPruebaFicheroVictimasTest);
        ReadXMLTestRobots rXMLTRobots = new ReadXMLTestRobots(VocabularioRosace.rutaPruebaFicheroRobotsTest);
        Document docRobots = rXMLTRobots.getDocument(rXMLTRobots.gettestFilePaht());
        NodeList nodeLstRobots = rXMLTRobots.getRobotsXMLStructure(docRobots, "robot");   //Obtain all the robots		
        int nroRobots = rXMLTRobots.getNumberOfRobots(nodeLstRobots);
        Document docVictimas = rXMLTSeq.getDocument(rXMLTSeq.gettestFilePaht());
        NodeList nodeLstVictimas = rXMLTSeq.getVictimsXMLStructure(docVictimas, "victim");   //Obtain all the victims
        int nroVictimas = rXMLTSeq.getNumberOfVictimsInSequence(nodeLstVictimas);

        System.out.println("Escenario actual simulado con " + nroRobots + " robots y " + nroVictimas + " victimas");
        System.out.println("Los elementos estan localizados en el escenario como sigue ......\n");
        
         for (int j = 0; j < nroRobots; j++) {
            Element info = rXMLTRobots.getRobotElement(nodeLstRobots, j);
            String valueid = rXMLTRobots.getRobotIDValue(info, "id");
            Coordinate valueInitialCoordinate = rXMLTRobots.getRobotCoordinate(info);
            int coordinateX = (int) valueInitialCoordinate.x;
            int coordinateY = (int) valueInitialCoordinate.y;
            //coordinateX = Math.abs(coordinateX);
            //coordinateY = Math.abs(coordinateY);
             
            //crear el label y posicionarlo en el JPanel
//            JLabel label = new JLabel("");
//            String rutaIconoRobot = directorioTrabajo + "/" + rutassrc + rutapaqueteConstructorEscenariosROSACE + imageniconoRobot;

            //System.out.println("Ruta->" + rutaIconoRobot);

//            label.setIcon(new javax.swing.ImageIcon(rutaIconoRobot));
            
            //El texto que se pone en el label NO es el nombre completo del robot, solo ponemos el numero. 
            //Por ejemplo, de robotIgualitario2 nos quedaria 2, y 2 sería el texto que ponemos en el label
            int index = utilsCadenaComponente.getNumberStartIndex(valueid);
            String idNumero = utilsCadenaComponente.getNumber(valueid, index);
            punto.move (coordinateX,coordinateY);
            Widget wid = crearNodeWidget("Robot"+idNumero, new Point(coordinateX,coordinateY));
            scene.addObject("Robot"+idNumero, wid);
//            scene.addNode("Robot"+idNumero).setPreferredLocation(new Point(coordinateX, coordinateY));
//            label.setText(idNumero);
//            label.setEnabled(true);
//            label.setVisible(true);

//            Dimension size = label.getPreferredSize();
//            label.setBounds(coordinateX, coordinateY, size.width, size.height);
//            panelVisor.add(label);

//            robotslabel.put(idNumero, label);   //Lo anoto en el Map: la clave es el numero del robot y contenido es el label creado

//            System.out.println("Localizacion del robot " + label.getText() + "-> (" + label.getLocation().x + "," + label.getLocation().y + ")");
        
        }
//        SceneSupport.show(scene);
//        System.out.println("");


        //*********************************************************************************************        
        //Aniadir al panel panelVisor los componentes label que representan las victimas leidas del xml
        //*********************************************************************************************                
        for (int j = 0; j < nroVictimas; j++) {
            //Obtain info about first victim located at the test sequence 
            Element info = rXMLTSeq.getVictimElement(nodeLstVictimas, j);
            String valueid = rXMLTSeq.getVictimIDValue(info, "id");
            Coordinate valueInitialCoordinate = rXMLTSeq.getVictimCoordinate(info);
            int coordinateX = (int) valueInitialCoordinate.x;
            int coordinateY = (int) valueInitialCoordinate.y;
            //coordinateX = Math.abs(coordinateX);
            //coordinateY = Math.abs(coordinateY);

            int index = utilsCadenaComponente.getNumberStartIndex(valueid);
            String idNumero = utilsCadenaComponente.getNumber(valueid, index);

            //System.out.println("idNumero->" + idNumero);

            int indexVictima;

            if (idNumero.equals("")) {
                indexVictima = 0;
                idNumero = "0";
                //System.out.println("El valor de idNumero es vacio");
            } else {
                int aux = utilsCadenaComponente.getNumberStartIndexPrimerDigitoDistintoCero(idNumero);
                idNumero = utilsCadenaComponente.getNumberSinCerosAlaIzquierda(idNumero, aux);
                //System.out.println("El valor de idNumero ahora es " + idNumero);           	
                indexVictima = Integer.parseInt(idNumero);
            }


            //Las victimas con identificador IMPAR se representaran con el icono de mujer. Por ejemplo, Victim.1, Victim.3, Victim.5, ....
            //Las victimas con identificador PAR se representaran con el icono de hombre.  Por ejemplo, Victim.2, Victim.4, Victim.6, ....
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            int numero = indexVictima % 2;
            String rutaIconoVictima = "";
            if (numero == 0) {
                rutaIconoVictima = directorioTrabajo + "/" + rutassrc + rutapaqueteConstructorEscenariosROSACE + imageniconoHombre;
            } else {
                rutaIconoVictima = directorioTrabajo + "/" + rutassrc + rutapaqueteConstructorEscenariosROSACE + imageniconoMujer;
            }

            //crear el label para la victima y posicionarlo
//            JLabel label = new JLabel("");
//            label.setIcon(new javax.swing.ImageIcon(rutaIconoVictima));
            //El texto que se pone en el label NO es el nombre completo de la victima, solo ponemos el numero. 
            //Por ejemplo, de Victim.3 nos quedaria 3, y 3 sería el texto que ponemos en el label
//            label.setText(idNumero);
            
            
//            Dimension size = label.getPreferredSize();
//            label.setBounds(coordinateX, coordinateY, size.width, size.height);
//            Widget victimWid = new Widget(scene);
//            victimWid.setPreferredSize(size);
//            victimWid.setLabel();
//            victimWid.setPreferredLocation(new Point(coordinateX,coordinateY));
//             punto.move (coordinateX,coordinateY);
             Widget victimWid = crearNodeWidget("victima"+idNumero, new Point(coordinateX,coordinateY));
             scene.addObject("victima"+idNumero,victimWid);
//            scene.addChild(crearNodeWidget("victima"+idNumero, punto)) ;
//            panelVisor.add(label);

//            victimaslabel.put(idNumero, label);   //Lo anoto en el Map: la clave es el numero de la victima y contenido es el label creado

//            System.out.println("Localizacion de la victima " + label.getText() + "-> (" + label.getLocation().x + "," + label.getLocation().y + ")");
        }
    }
    protected Widget crearNodeWidget (String idNode, Point punto) {
        IconNodeWidget widget = new IconNodeWidget (scene);
        if (idNode.contains("Robot"))widget.setImage (IMAGErobot);
        else widget.setImage (IMAGEmujer);     
        widget.setLabel (idNode);
        widget.setPreferredLocation(punto);
        layer.addChild (widget);
        widget.getActions ().addAction (scene.createWidgetHoverAction());
        widget.getActions ().addAction (moveAction);

        return widget;
    }
        public synchronized void cambiarIconoVictimaARescatada(String valor_idVictima) {
        System.out.println("se cambia el icono de la victima a rescatada: "+valor_idVictima );
//        ((IconNodeWidget)scene.findWidget(valor_idVictima)).setImage(IMAGEmujerRes);
        if (((IconNodeWidget)scene.findWidget(valor_idVictima))!=null)
                ((IconNodeWidget)scene.findWidget(valor_idVictima)).setImage(IMAGEmujerRes);
        else System.out.println("No se cambia el icono de la victima a rescatada: "+valor_idVictima+
                "porque el icono en la escena es null");
        this.notify();
//        int numeroIdVictima = Integer.parseInt(numeroVictima);
//
//        JLabel jlabelVictima = new JLabel();
//
//        jlabelVictima = victimaslabel.get(numeroVictima);
//
//        if (jlabelVictima != null) {
//
//            //String rutaAbsolutaIconoVictima = jlabelVictima.getIcon().toString();			
//            //System.out.println("victima " + numeroVictima + "  , " + jlabelVictima.getIcon().toString());
//
//            if (numeroIdVictima % 2 == 0) {
//                jlabelVictima.setIcon(new javax.swing.ImageIcon(directorioTrabajo + "/" + rutassrc + rutapaqueteConstructorEscenariosROSACE + "HombreRescatado.png"));
//                //System.out.println("Es un hombre");
//            } else {
//                jlabelVictima.setIcon(new javax.swing.ImageIcon(directorioTrabajo + "/" + rutassrc + rutapaqueteConstructorEscenariosROSACE + "MujerRescatada.png"));
//                //System.out.println("Es una mujer");
//            }
//
//        } else {
//            System.out.println("jlabelVictima nulo");
//        }
    System.out.println("se cambia el icono de la victima a rescatada");
    }
  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
